.. https://docs.amperity.com/datagrid/


.. meta::
    :description lang=en:
        Review the domain tables that have been generated by feeds.

.. meta::
    :content class=swiftype name=body data-type=text:
        Review the domain tables that have been generated by feeds.

.. meta::
    :content class=swiftype name=title data-type=string:
        Review domain data

==================================================
Review domain data
==================================================

.. include:: ../../shared/terms.rst
   :start-after: .. term-domain-table-start
   :end-before: .. term-domain-table-end


.. _domain-data-review:

Review domain data
==================================================

.. domain-data-review-start

The **Domain Tables** section of the **Sources** page lists the domain tables that have been generated by feeds. Each row shows the name of the domain table, the type of record contained within that domain table (customer or interaction), and the number of columns.

.. domain-data-review-end


.. _domain-data-review-amperity-added:

Amperity-added columns
--------------------------------------------------

.. domain-data-review-amperity-added-start

Amperity adds the following columns to all domain tables. The added columns start with underscores ( _ ) and are used by Amperity during Stitch processing.

   #. The **_pk** column is an identifier that is generated based on the all of the columns in the feed that were associated to the primary key.
   #. The **_uuid_pk** column contains a system-generated UUID. This UUID helps Amperity distribute work during Stitch processing.
   #. The **_updated** column contains details about the last update and is system-generated.

   These columns will be available in the customer 360 database when a domain table is configured as a passthrough table.

.. domain-data-review-amperity-added-end


.. _domain-data-review-columns:

Column types
--------------------------------------------------

.. domain-data-review-columns-start

Columns in domain tables may be one of the following types:

.. list-table::
   :widths: 25 75
   :header-rows: 1

   * - Type
     - Description
   * - **Boolean**
     - A value that represents an either/or, such as true or false, 0 or 1, true or NULL.

   * - **date**
     - An ISO-8601 compliant date values, such as a birthdate. For example:

       * 2021-11-04

   * - **datetime**
     - An ISO-8601 compliant date and time values=, such as a purchase or transaction, the time at which data was last updated, or a campaign launch date. For example:

       * Mon Nov 30 2020 16:00:00 GMT-0800 (Pacific Standard Time)
       * Sat Sep 02 2017 14:36:19 GMT-0700 (Pacific Daylight Time)

       .. important:: Some fields that store datetime values are set to the string data type.

   * - **decimal**
     - A fixed point number, such as for prices or message sizes. (The number of characters in the decimal value is configurable during feed setup.). For example:

       * 1.50 (prices)
       * 1874.380 (message sizes)
       * 141.48042 (order subtotals)

   * - **float**
     - A floating point number. (Use decimal for prices.) For example:

       * 3.14
       * 3.14159

   * - **integer**
     - A numeric value, such as the quantity of items purchased. Do not use data type for prices. For example:

       * 1
       * 12345

   * - **string**
     - A sequence of characters, such as first and last names, email addresses, physical addresses, UUIDs (and other IDs), phone numbers, zip codes, product names, descriptions, and so on. May be empty. For example:

       * John
       * Smith
       * John Smith
       * johnsmith @ domain.com
       * 123 Main Street
       * 206-555-1111
       * 00002ac0-0915-3cb4-b7c7-5ee192b3bd49
       * ACME
       * pants
       * 
       * "A data source that pulls from an Amazon S3 bucket."

.. domain-data-review-columns-end


.. _domain-data-review-records:

Record types
--------------------------------------------------

.. domain-data-review-records-start

Two important types of data are present in domain tables:

* :ref:`Customer records <domain-data-review-records-customer>`
* :ref:`Interaction records <domain-data-review-records-interactions>`

.. note:: A domain table *may* contain both customer and interaction records. As part of the Stitch process, customer records and interaction records are split into dedicated tables for use within the customer 360 database. A domain table *may* contain other types of data.

.. domain-data-review-records-end


.. _domain-data-review-records-customer:

Customer records
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../shared/terms.rst
   :start-after: .. term-customer-record-start
   :end-before: .. term-customer-record-end

.. domain-data-review-records-customer-start

Customer records are defined by the presence of data that can be assigned semantic tags for :ref:`customer profile data <semantics-profile>`, specifically to fields that contain personally identifiable information (PII).

.. domain-data-review-records-customer-end


.. _domain-data-review-records-interactions:

Interaction records
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../shared/terms.rst
   :start-after: .. term-interaction-record-start
   :end-before: .. term-interaction-record-end

.. domain-data-review-records-interactions-start

Interaction records are defined by the presence of data that can be assigned semantic tags for transactions, itemized transactions, product catalogs, and other behavior data, such as semantic tags for loyalty programs and customer engagement.

Interaction records often :ref:`require data to be reshaped using domain SQL (and custom domain tables) <domain-data-reshape>` to ensure that the right combination of fields are present in the data to support components and workflows, including functionality that is available from the **Segments** page, predicted modeling, and the **Campaigns** page.

.. domain-data-review-records-interactions-end


.. _domain-data-reshape:

Reshape domain data
==================================================

.. include:: ../../shared/terms.rst
   :start-after: .. term-domain-sql-start
   :end-before: .. term-domain-sql-end

.. domain-data-reshape-note-start

.. note:: A custom domain table should be designed to be as static as possible. A change in the source data will often require a change to the SQL that defines the custom domain table, which may require a complete reload of data for that data source.

.. domain-data-reshape-note-end


.. _domain-data-spark-sql:

About domain SQL
--------------------------------------------------

.. include:: ../../shared/terms.rst
   :start-after: .. term-domain-sql-start
   :end-before: .. term-domain-sql-end

.. domain-data-reshape-start

Use |sql_spark| to reshape domain tables into custom domain tables. A reshaped domain table acts like a feed, in that you can apply semantic tags, identify a primary key, make the table available to Stitch, and so on.

.. domain-data-reshape-end


.. _domain-data-reshape-examples:

Examples
--------------------------------------------------

.. domain-data-reshape-examples-start

The following examples show using Spark SQL to reshape domain data:

* :ref:`domain-data-reshape-example-build-birthdates`
* :ref:`domain-data-reshape-example-combine-postal-codes`
* :ref:`domain-data-reshape-example-extract-names`
* :ref:`domain-data-reshape-example-hash-profile-data`
* :ref:`domain-data-reshape-example-parse-multiple-separators`
* :ref:`domain-data-reshape-example-set-non-usa-email-to-null`
* :ref:`domain-data-reshape-example-standardize-phone-numbers`
* :ref:`domain-data-reshape-example-standardize-usa-states`

.. domain-data-reshape-examples-end


.. _domain-data-reshape-example-build-birthdates:

Build birthdates
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../amperity_reference/source/sql_spark.rst
   :start-after: .. sql-spark-function-if-example-build-birthdate-start
   :end-before: .. sql-spark-function-if-example-build-birthdate-end


.. _domain-data-reshape-example-combine-postal-codes:

Combine postal codes
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../amperity_reference/source/sql_spark.rst
   :start-after: .. sql-spark-function-concat-ws-example-combine-postal-codes-start
   :end-before: .. sql-spark-function-concat-ws-example-combine-postal-codes-end


.. _domain-data-reshape-example-extract-names:

Extract names
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../amperity_reference/source/sql_spark.rst
   :start-after: .. sql-spark-function-regexp-extract-example-names-start
   :end-before: .. sql-spark-function-regexp-extract-example-names-end


.. _domain-data-reshape-example-hash-profile-data:

Hash profile data
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../amperity_reference/source/sql_spark.rst
   :start-after: .. sql-spark-function-sha2-example-rehash-data-start
   :end-before: .. sql-spark-function-sha2-example-rehash-data-end


.. _domain-data-reshape-example-parse-multiple-separators:

Parse multiple separators
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../amperity_reference/source/sql_spark.rst
   :start-after: .. sql-spark-function-split-example-parse-fields-with-multiple-separators-start
   :end-before: .. sql-spark-function-split-example-parse-fields-with-multiple-separators-end


.. _domain-data-reshape-example-set-non-usa-email-to-null:

Set non-USA email to NULL
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../amperity_reference/source/sql_spark.rst
   :start-after: .. sql-spark-function-decode-example-identify-non-us-ascii-email-start
   :end-before: .. sql-spark-function-decode-example-identify-non-us-ascii-email-end


.. _domain-data-reshape-example-standardize-phone-numbers:

Standardize phone numbers
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../amperity_reference/source/sql_spark.rst
   :start-after: .. sql-spark-function-trim-example-phone-numbers-start
   :end-before: .. sql-spark-function-trim-example-phone-numbers-end


.. _domain-data-reshape-example-standardize-usa-states:

Standardize USA states
++++++++++++++++++++++++++++++++++++++++++++++++++

.. include:: ../../amperity_reference/source/sql_spark.rst
   :start-after: .. sql-spark-function-coalesce-example-standardize-values-for-usa-states-start
   :end-before: .. sql-spark-function-coalesce-example-standardize-values-for-usa-states-end
